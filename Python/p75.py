# This file was *autogenerated* from the file p75.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_1500000 = Integer(1500000); _sage_const_400 = Integer(400)
def pythag_triple(m, n):
    return (m**_sage_const_2  - n**_sage_const_2 , _sage_const_2  * m * n, m**_sage_const_2  + n**_sage_const_2 )

def prim_pythag_triples(m):
    res = []
    for n in xrange(_sage_const_2  if m % _sage_const_2  > _sage_const_0  else _sage_const_1 , m, _sage_const_2 ):
        if (m - n) % _sage_const_2  > _sage_const_0 :
            if is_coprime(m, n):
                res.append(pythag_triple(m, n))
    return res

def gen_prim_pythag_triples(limit, verbose=_sage_const_0 ):
    for m in xrange(limit):
        if verbose > _sage_const_0 :
            show_bar(m, limit, number_limit=True)
        yield prim_pythag_triples(m)
    if verbose > _sage_const_0 :
        print('')

def pythag_triples(m):
    res = []
    for n in xrange(_sage_const_0 , m):
        res.append(pythag_triple(m, n))
    return res

def gen_pythag_triples(limit, verbose=_sage_const_0 ):
    for m in xrange(limit):
        if verbose > _sage_const_0 :
            show_bar(m, limit, number_limit=True)
        yield pythag_triples(m)
    if verbose > _sage_const_0 :
        print('')

def sum_pythag_triples(limit, verbose=_sage_const_0 ):
    prim_triples = combine_lists(list(gen_prim_pythag_triples(limit, verbose=verbose)), verbose=verbose)

    if verbose > _sage_const_0 :
        prim_triples_sums = set(map_with_progress(lambda i: (sum(i), i), prim_triples, desc='Summing primitive triples. '))
    else:
        prim_triples_sums = set(map(lambda i: (sum(i), i), prim_triples))

    max_sum = max(prim_triples_sums)[_sage_const_0 ]

    if verbose > _sage_const_0 :
        prim_triples = map(np.array, prim_triples)
        triples = map_with_progress(lambda trip: take_while(number_list(lambda x: trip * x), lambda ns: sum(ns) < max_sum), prim_triples, desc='Generating triple multiples. ')
        triples = combine_lists(triples, verbose=verbose)
        triples = map_with_progress(tuple, triples, desc='Making tuples. ')
    else:
        triples = map(lambda trip: take_while(number_list(lambda x: np.array(trip) * x), lambda ns: sum(ns) < max_sum))
        triples = combine_lists(triples, verbose=verbose)
        triples = map(tuple, triples)

    if verbose > _sage_const_0 :
        return sorted(set(map_with_progress(lambda i: (sum(i), i), triples, desc='Summing triples. ')))
    else:
        return sorted(set(map(lambda i: (sum(i), i), triples)))

def find_triple_sums(triple_sums, target):
    res = []

    for tsum, triple in triple_sums:
        if tsum > target:
            break
        elif tsum == target:
            res.append(triple)

    return res

def p75():
    triple_sums = sum_pythag_triples(_sage_const_400 , verbose=_sage_const_1 )
    triple_sums = filter_with_progress(lambda x: x[_sage_const_0 ] <= _sage_const_1500000 , triple_sums, desc='Removing triples with sum > 1,500,000: ')

    #print(triple_sums)

    return triple_sums
